[2017-06-23 11:40:25] request.INFO: Matched route "homepage". {"route":"homepage","route_parameters":{"_controller":"AppBundle\\Controller\\DefaultController::indexAction","_route":"homepage"},"request_uri":"http://127.0.0.1:8000/","method":"GET"} []
[2017-06-23 11:40:25] security.DEBUG: Read existing security token from the session. {"key":"_security_main"} []
[2017-06-23 11:40:25] doctrine.DEBUG: SELECT t0.username AS username_1, t0.username_canonical AS username_canonical_2, t0.email AS email_3, t0.email_canonical AS email_canonical_4, t0.enabled AS enabled_5, t0.salt AS salt_6, t0.password AS password_7, t0.last_login AS last_login_8, t0.confirmation_token AS confirmation_token_9, t0.password_requested_at AS password_requested_at_10, t0.roles AS roles_11, t0.id AS id_12 FROM users t0 WHERE t0.id = ? LIMIT 1 [2] []
[2017-06-23 11:40:25] security.DEBUG: User was reloaded from a user provider. {"username":"admin","provider":"FOS\\UserBundle\\Security\\UserProvider"} []
[2017-06-23 11:40:25] doctrine.DEBUG: SELECT t0_.id AS id_0, t0_.amount AS amount_1, t0_.date AS date_2, c1_.name AS name_3, c1_.cnp AS cnp_4, t0_.customId AS customId_5 FROM transaction t0_ LEFT JOIN customer c1_ ON (c1_.id = t0_.customId) [] []
[2017-06-23 11:40:25] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2017-06-23 11:40:25] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_controller":"web_profiler.controller.profiler:toolbarAction","token":"ed93bb","_route":"_wdt"},"request_uri":"http://127.0.0.1:8000/_wdt/ed93bb","method":"GET"} []
[2017-06-23 11:40:57] request.INFO: Matched route "get_transaction". {"route":"get_transaction","route_parameters":{"_controller":"AppBundle\\Controller\\TransactionController:getAction","_format":"json","customId":"2","transId":"3","_route":"get_transaction"},"request_uri":"http://127.0.0.1:8000/api/transaction/2/3","method":"GET"} []
[2017-06-23 11:40:57] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2017-06-23 11:40:57] security.DEBUG: Calling getCredentials() on guard configurator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:40:57] security.INFO: Guard authentication failed. {"exception":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Exception\\ExpiredTokenException(code: 0):  at /mnt/storage/private/public_html/bank/vendor/lexik/jwt-authentication-bundle/Security/Guard/JWTTokenAuthenticator.php:111)","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:40:57] security.DEBUG: The "Lexik\Bundle\JWTAuthenticationBundle\Security\Guard\JWTTokenAuthenticator" authenticator set the response. Any later authenticator will not be called {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:41:03] request.INFO: Matched route "api_login_check". {"route":"api_login_check","route_parameters":{"_route":"api_login_check"},"request_uri":"http://127.0.0.1:8000/api/login_check","method":"POST"} []
[2017-06-23 11:41:03] doctrine.DEBUG: SELECT t0.username AS username_1, t0.username_canonical AS username_canonical_2, t0.email AS email_3, t0.email_canonical AS email_canonical_4, t0.enabled AS enabled_5, t0.salt AS salt_6, t0.password AS password_7, t0.last_login AS last_login_8, t0.confirmation_token AS confirmation_token_9, t0.password_requested_at AS password_requested_at_10, t0.roles AS roles_11, t0.id AS id_12 FROM users t0 WHERE t0.username_canonical = ? LIMIT 1 ["admin"] []
[2017-06-23 11:41:03] security.INFO: User has been authenticated successfully. {"username":"admin"} []
[2017-06-23 11:41:03] doctrine.DEBUG: "START TRANSACTION" [] []
[2017-06-23 11:41:03] doctrine.DEBUG: UPDATE users SET last_login = ? WHERE id = ? ["2017-06-23 11:41:03",2] []
[2017-06-23 11:41:03] doctrine.DEBUG: "COMMIT" [] []
[2017-06-23 11:42:30] request.INFO: Matched route "api_login_check". {"route":"api_login_check","route_parameters":{"_route":"api_login_check"},"request_uri":"http://127.0.0.1:8000/api/login_check","method":"POST"} []
[2017-06-23 11:42:30] doctrine.DEBUG: SELECT t0.username AS username_1, t0.username_canonical AS username_canonical_2, t0.email AS email_3, t0.email_canonical AS email_canonical_4, t0.enabled AS enabled_5, t0.salt AS salt_6, t0.password AS password_7, t0.last_login AS last_login_8, t0.confirmation_token AS confirmation_token_9, t0.password_requested_at AS password_requested_at_10, t0.roles AS roles_11, t0.id AS id_12 FROM users t0 WHERE t0.username_canonical = ? LIMIT 1 ["admin"] []
[2017-06-23 11:42:30] security.INFO: User has been authenticated successfully. {"username":"admin"} []
[2017-06-23 11:42:30] doctrine.DEBUG: "START TRANSACTION" [] []
[2017-06-23 11:42:30] doctrine.DEBUG: UPDATE users SET last_login = ? WHERE id = ? ["2017-06-23 11:42:30",2] []
[2017-06-23 11:42:30] doctrine.DEBUG: "COMMIT" [] []
[2017-06-23 11:42:43] request.INFO: Matched route "get_transaction". {"route":"get_transaction","route_parameters":{"_controller":"AppBundle\\Controller\\TransactionController:getAction","_format":"json","customId":"2","transId":"3","_route":"get_transaction"},"request_uri":"http://127.0.0.1:8000/api/transaction/2/3","method":"GET"} []
[2017-06-23 11:42:43] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2017-06-23 11:42:43] security.DEBUG: Calling getCredentials() on guard configurator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:42:43] security.INFO: Guard authentication failed. {"exception":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Exception\\ExpiredTokenException(code: 0):  at /mnt/storage/private/public_html/bank/vendor/lexik/jwt-authentication-bundle/Security/Guard/JWTTokenAuthenticator.php:111)","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:42:43] security.DEBUG: The "Lexik\Bundle\JWTAuthenticationBundle\Security\Guard\JWTTokenAuthenticator" authenticator set the response. Any later authenticator will not be called {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:42:50] request.INFO: Matched route "get_transaction". {"route":"get_transaction","route_parameters":{"_controller":"AppBundle\\Controller\\TransactionController:getAction","_format":"json","customId":"2","transId":"3","_route":"get_transaction"},"request_uri":"http://127.0.0.1:8000/api/transaction/2/3","method":"GET"} []
[2017-06-23 11:42:50] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2017-06-23 11:42:50] security.DEBUG: Calling getCredentials() on guard configurator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:42:50] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:42:50] doctrine.DEBUG: SELECT t0.username AS username_1, t0.username_canonical AS username_canonical_2, t0.email AS email_3, t0.email_canonical AS email_canonical_4, t0.enabled AS enabled_5, t0.salt AS salt_6, t0.password AS password_7, t0.last_login AS last_login_8, t0.confirmation_token AS confirmation_token_9, t0.password_requested_at AS password_requested_at_10, t0.roles AS roles_11, t0.id AS id_12 FROM users t0 WHERE t0.username_canonical = ? LIMIT 1 ["admin"] []
[2017-06-23 11:42:50] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"admin\", authenticated=true, roles=\"ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:42:50] doctrine.DEBUG: "START TRANSACTION" [] []
[2017-06-23 11:42:50] doctrine.DEBUG: UPDATE users SET last_login = ? WHERE id = ? ["2017-06-23 11:42:50",2] []
[2017-06-23 11:42:50] doctrine.DEBUG: "COMMIT" [] []
[2017-06-23 11:42:50] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:42:50] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:42:50] doctrine.DEBUG: SELECT t0_.id AS id_0, t0_.amount AS amount_1, t0_.date AS date_2 FROM transaction t0_ WHERE t0_.customId = ? AND t0_.id = ? ["2","3"] []
[2017-06-23 11:44:51] request.INFO: Matched route "update_transaction". {"route":"update_transaction","route_parameters":{"_controller":"AppBundle\\Controller\\TransactionController:updateAction","_format":"json","transId":"2","amount":"256.99","_route":"update_transaction"},"request_uri":"http://127.0.0.1:8000/api/update_transaction/2/256.99","method":"PUT"} []
[2017-06-23 11:44:51] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2017-06-23 11:44:51] security.DEBUG: Calling getCredentials() on guard configurator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:44:51] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:44:51] doctrine.DEBUG: SELECT t0.username AS username_1, t0.username_canonical AS username_canonical_2, t0.email AS email_3, t0.email_canonical AS email_canonical_4, t0.enabled AS enabled_5, t0.salt AS salt_6, t0.password AS password_7, t0.last_login AS last_login_8, t0.confirmation_token AS confirmation_token_9, t0.password_requested_at AS password_requested_at_10, t0.roles AS roles_11, t0.id AS id_12 FROM users t0 WHERE t0.username_canonical = ? LIMIT 1 ["admin"] []
[2017-06-23 11:44:51] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"admin\", authenticated=true, roles=\"ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:44:51] doctrine.DEBUG: "START TRANSACTION" [] []
[2017-06-23 11:44:51] doctrine.DEBUG: UPDATE users SET last_login = ? WHERE id = ? ["2017-06-23 11:44:51",2] []
[2017-06-23 11:44:51] doctrine.DEBUG: "COMMIT" [] []
[2017-06-23 11:44:51] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:44:51] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:44:51] doctrine.DEBUG: SELECT t0.id AS id_1, t0.date AS date_2, t0.amount AS amount_3, t0.customId AS customId_4, t0.customId AS customId_5 FROM transaction t0 WHERE t0.id = ? ["2"] []
[2017-06-23 11:44:51] doctrine.DEBUG: "START TRANSACTION" [] []
[2017-06-23 11:44:51] doctrine.DEBUG: UPDATE transaction SET amount = ? WHERE id = ? ["256.99",2] []
[2017-06-23 11:44:51] doctrine.DEBUG: "COMMIT" [] []
[2017-06-23 11:45:03] request.INFO: Matched route "homepage". {"route":"homepage","route_parameters":{"_controller":"AppBundle\\Controller\\DefaultController::indexAction","_route":"homepage"},"request_uri":"http://127.0.0.1:8000/","method":"GET"} []
[2017-06-23 11:45:04] security.DEBUG: Read existing security token from the session. {"key":"_security_main"} []
[2017-06-23 11:45:04] doctrine.DEBUG: SELECT t0.username AS username_1, t0.username_canonical AS username_canonical_2, t0.email AS email_3, t0.email_canonical AS email_canonical_4, t0.enabled AS enabled_5, t0.salt AS salt_6, t0.password AS password_7, t0.last_login AS last_login_8, t0.confirmation_token AS confirmation_token_9, t0.password_requested_at AS password_requested_at_10, t0.roles AS roles_11, t0.id AS id_12 FROM users t0 WHERE t0.id = ? LIMIT 1 [2] []
[2017-06-23 11:45:04] security.DEBUG: User was reloaded from a user provider. {"username":"admin","provider":"FOS\\UserBundle\\Security\\UserProvider"} []
[2017-06-23 11:45:04] doctrine.DEBUG: SELECT t0_.id AS id_0, t0_.amount AS amount_1, t0_.date AS date_2, c1_.name AS name_3, c1_.cnp AS cnp_4, t0_.customId AS customId_5 FROM transaction t0_ LEFT JOIN customer c1_ ON (c1_.id = t0_.customId) [] []
[2017-06-23 11:45:04] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2017-06-23 11:45:04] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_controller":"web_profiler.controller.profiler:toolbarAction","token":"fecf22","_route":"_wdt"},"request_uri":"http://127.0.0.1:8000/_wdt/fecf22","method":"GET"} []
[2017-06-23 11:45:51] request.ERROR: Uncaught PHP Exception Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException: "No route found for "PUT /api/add_transaction/4/238.40": Method Not Allowed (Allow: POST)" at /mnt/storage/private/public_html/bank/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/RouterListener.php line 129 {"exception":"[object] (Symfony\\Component\\HttpKernel\\Exception\\MethodNotAllowedHttpException(code: 0): No route found for \"PUT /api/add_transaction/4/238.40\": Method Not Allowed (Allow: POST) at /mnt/storage/private/public_html/bank/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/RouterListener.php:129, Symfony\\Component\\Routing\\Exception\\MethodNotAllowedException(code: 0):  at /mnt/storage/private/public_html/bank/var/cache/dev/appDevDebugProjectContainerUrlMatcher.php:459)"} []
[2017-06-23 11:45:56] request.INFO: Matched route "add_transaction". {"route":"add_transaction","route_parameters":{"_controller":"AppBundle\\Controller\\TransactionController:addAction","_format":"json","customId":"4","amount":"238.40","_route":"add_transaction"},"request_uri":"http://127.0.0.1:8000/api/add_transaction/4/238.40","method":"POST"} []
[2017-06-23 11:45:56] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2017-06-23 11:45:56] security.DEBUG: Calling getCredentials() on guard configurator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:45:56] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:45:56] doctrine.DEBUG: SELECT t0.username AS username_1, t0.username_canonical AS username_canonical_2, t0.email AS email_3, t0.email_canonical AS email_canonical_4, t0.enabled AS enabled_5, t0.salt AS salt_6, t0.password AS password_7, t0.last_login AS last_login_8, t0.confirmation_token AS confirmation_token_9, t0.password_requested_at AS password_requested_at_10, t0.roles AS roles_11, t0.id AS id_12 FROM users t0 WHERE t0.username_canonical = ? LIMIT 1 ["admin"] []
[2017-06-23 11:45:56] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"admin\", authenticated=true, roles=\"ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:45:56] doctrine.DEBUG: "START TRANSACTION" [] []
[2017-06-23 11:45:56] doctrine.DEBUG: UPDATE users SET last_login = ? WHERE id = ? ["2017-06-23 11:45:56",2] []
[2017-06-23 11:45:56] doctrine.DEBUG: "COMMIT" [] []
[2017-06-23 11:45:56] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:45:56] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:45:56] doctrine.DEBUG: SELECT t0.id AS id_1, t0.name AS name_2, t0.cnp AS cnp_3 FROM customer t0 WHERE t0.id = ? ["4"] []
[2017-06-23 11:45:56] doctrine.DEBUG: "START TRANSACTION" [] []
[2017-06-23 11:45:56] doctrine.DEBUG: INSERT INTO transaction (date, amount, customId) VALUES (?, ?, ?) {"1":"2017-06-23 11:45:56","2":"238.40","3":4} []
[2017-06-23 11:45:56] doctrine.DEBUG: "COMMIT" [] []
[2017-06-23 11:45:56] doctrine.DEBUG: SELECT t0.id AS id_1, t0.date AS date_2, t0.amount AS amount_3, t0.customId AS customId_4, t0.customId AS customId_5 FROM transaction t0 WHERE t0.customId = ? ORDER BY t0.id DESC LIMIT 1 OFFSET 0 ["4"] []
[2017-06-23 11:46:03] request.INFO: Matched route "homepage". {"route":"homepage","route_parameters":{"_controller":"AppBundle\\Controller\\DefaultController::indexAction","_route":"homepage"},"request_uri":"http://127.0.0.1:8000/","method":"GET"} []
[2017-06-23 11:46:04] security.DEBUG: Read existing security token from the session. {"key":"_security_main"} []
[2017-06-23 11:46:04] doctrine.DEBUG: SELECT t0.username AS username_1, t0.username_canonical AS username_canonical_2, t0.email AS email_3, t0.email_canonical AS email_canonical_4, t0.enabled AS enabled_5, t0.salt AS salt_6, t0.password AS password_7, t0.last_login AS last_login_8, t0.confirmation_token AS confirmation_token_9, t0.password_requested_at AS password_requested_at_10, t0.roles AS roles_11, t0.id AS id_12 FROM users t0 WHERE t0.id = ? LIMIT 1 [2] []
[2017-06-23 11:46:04] security.DEBUG: User was reloaded from a user provider. {"username":"admin","provider":"FOS\\UserBundle\\Security\\UserProvider"} []
[2017-06-23 11:46:04] doctrine.DEBUG: SELECT t0_.id AS id_0, t0_.amount AS amount_1, t0_.date AS date_2, c1_.name AS name_3, c1_.cnp AS cnp_4, t0_.customId AS customId_5 FROM transaction t0_ LEFT JOIN customer c1_ ON (c1_.id = t0_.customId) [] []
[2017-06-23 11:46:04] security.DEBUG: Stored the security token in the session. {"key":"_security_main"} []
[2017-06-23 11:46:04] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_controller":"web_profiler.controller.profiler:toolbarAction","token":"8f854f","_route":"_wdt"},"request_uri":"http://127.0.0.1:8000/_wdt/8f854f","method":"GET"} []
[2017-06-23 11:47:25] request.ERROR: Uncaught PHP Exception Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException: "No route found for "POST /api/transactions_by_filter/11/659.20/2017-06-22/0/10": Method Not Allowed (Allow: GET)" at /mnt/storage/private/public_html/bank/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/RouterListener.php line 129 {"exception":"[object] (Symfony\\Component\\HttpKernel\\Exception\\MethodNotAllowedHttpException(code: 0): No route found for \"POST /api/transactions_by_filter/11/659.20/2017-06-22/0/10\": Method Not Allowed (Allow: GET) at /mnt/storage/private/public_html/bank/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/RouterListener.php:129, Symfony\\Component\\Routing\\Exception\\MethodNotAllowedException(code: 0):  at /mnt/storage/private/public_html/bank/var/cache/dev/appDevDebugProjectContainerUrlMatcher.php:459)"} []
[2017-06-23 11:47:29] request.INFO: Matched route "get_transaction_by_filter". {"route":"get_transaction_by_filter","route_parameters":{"_controller":"AppBundle\\Controller\\TransactionController:getByFilterAction","_format":"json","customId":"11","amount":"659.20","date":"2017-06-22","offset":"0","limit":"10","_route":"get_transaction_by_filter"},"request_uri":"http://127.0.0.1:8000/api/transactions_by_filter/11/659.20/2017-06-22/0/10","method":"GET"} []
[2017-06-23 11:47:29] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2017-06-23 11:47:29] security.DEBUG: Calling getCredentials() on guard configurator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:47:29] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:47:29] doctrine.DEBUG: SELECT t0.username AS username_1, t0.username_canonical AS username_canonical_2, t0.email AS email_3, t0.email_canonical AS email_canonical_4, t0.enabled AS enabled_5, t0.salt AS salt_6, t0.password AS password_7, t0.last_login AS last_login_8, t0.confirmation_token AS confirmation_token_9, t0.password_requested_at AS password_requested_at_10, t0.roles AS roles_11, t0.id AS id_12 FROM users t0 WHERE t0.username_canonical = ? LIMIT 1 ["admin"] []
[2017-06-23 11:47:29] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"admin\", authenticated=true, roles=\"ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:47:29] doctrine.DEBUG: "START TRANSACTION" [] []
[2017-06-23 11:47:29] doctrine.DEBUG: UPDATE users SET last_login = ? WHERE id = ? ["2017-06-23 11:47:29",2] []
[2017-06-23 11:47:29] doctrine.DEBUG: "COMMIT" [] []
[2017-06-23 11:47:29] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:47:29] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:47:29] doctrine.DEBUG: SELECT t0_.id AS id_0, t0_.date AS date_1, t0_.amount AS amount_2, t0_.customId AS customId_3, t0_.customId AS customId_4 FROM transaction t0_ WHERE t0_.customId = ? AND t0_.amount = ? AND t0_.date = ? LIMIT 10 OFFSET 0 ["11","659.20","2017-06-22"] []
[2017-06-23 11:47:54] request.INFO: Matched route "get_transaction_by_filter". {"route":"get_transaction_by_filter","route_parameters":{"_controller":"AppBundle\\Controller\\TransactionController:getByFilterAction","_format":"json","customId":"11","amount":"659.20","date":"2017-06-22","offset":"0","limit":"2","_route":"get_transaction_by_filter"},"request_uri":"http://127.0.0.1:8000/api/transactions_by_filter/11/659.20/2017-06-22/0/2","method":"GET"} []
[2017-06-23 11:47:54] security.DEBUG: Checking for guard authentication credentials. {"firewall_key":"api","authenticators":1} []
[2017-06-23 11:47:54] security.DEBUG: Calling getCredentials() on guard configurator. {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:47:54] security.DEBUG: Passing guard token information to the GuardAuthenticationProvider {"firewall_key":"api","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:47:54] doctrine.DEBUG: SELECT t0.username AS username_1, t0.username_canonical AS username_canonical_2, t0.email AS email_3, t0.email_canonical AS email_canonical_4, t0.enabled AS enabled_5, t0.salt AS salt_6, t0.password AS password_7, t0.last_login AS last_login_8, t0.confirmation_token AS confirmation_token_9, t0.password_requested_at AS password_requested_at_10, t0.roles AS roles_11, t0.id AS id_12 FROM users t0 WHERE t0.username_canonical = ? LIMIT 1 ["admin"] []
[2017-06-23 11:47:54] security.INFO: Guard authentication successful! {"token":"[object] (Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Authentication\\Token\\JWTUserToken: JWTUserToken(user=\"admin\", authenticated=true, roles=\"ROLE_USER\"))","authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:47:54] doctrine.DEBUG: "START TRANSACTION" [] []
[2017-06-23 11:47:54] doctrine.DEBUG: UPDATE users SET last_login = ? WHERE id = ? ["2017-06-23 11:47:54",2] []
[2017-06-23 11:47:54] doctrine.DEBUG: "COMMIT" [] []
[2017-06-23 11:47:54] security.DEBUG: Guard authenticator set no success response: request continues. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:47:54] security.DEBUG: Remember me skipped: it is not configured for the firewall. {"authenticator":"Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Guard\\JWTTokenAuthenticator"} []
[2017-06-23 11:47:54] doctrine.DEBUG: SELECT t0_.id AS id_0, t0_.date AS date_1, t0_.amount AS amount_2, t0_.customId AS customId_3, t0_.customId AS customId_4 FROM transaction t0_ WHERE t0_.customId = ? AND t0_.amount = ? AND t0_.date = ? LIMIT 2 OFFSET 0 ["11","659.20","2017-06-22"] []
[2017-06-23 11:48:22] request.INFO: Matched route "fos_user_security_logout". {"route":"fos_user_security_logout","route_parameters":{"_controller":"FOS\\UserBundle\\Controller\\SecurityController::logoutAction","_route":"fos_user_security_logout"},"request_uri":"http://127.0.0.1:8000/logout","method":"GET"} []
[2017-06-23 11:48:22] security.DEBUG: Read existing security token from the session. {"key":"_security_main"} []
[2017-06-23 11:48:22] doctrine.DEBUG: SELECT t0.username AS username_1, t0.username_canonical AS username_canonical_2, t0.email AS email_3, t0.email_canonical AS email_canonical_4, t0.enabled AS enabled_5, t0.salt AS salt_6, t0.password AS password_7, t0.last_login AS last_login_8, t0.confirmation_token AS confirmation_token_9, t0.password_requested_at AS password_requested_at_10, t0.roles AS roles_11, t0.id AS id_12 FROM users t0 WHERE t0.id = ? LIMIT 1 [2] []
[2017-06-23 11:48:22] security.DEBUG: User was reloaded from a user provider. {"username":"admin","provider":"FOS\\UserBundle\\Security\\UserProvider"} []
[2017-06-23 11:48:22] security.DEBUG: Clearing remember-me cookie. {"name":"REMEMBERME"} []
[2017-06-23 11:48:22] request.INFO: Matched route "homepage". {"route":"homepage","route_parameters":{"_controller":"AppBundle\\Controller\\DefaultController::indexAction","_route":"homepage"},"request_uri":"http://127.0.0.1:8000/","method":"GET"} []
[2017-06-23 11:48:22] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2017-06-23 11:48:22] security.DEBUG: Access denied, the user is not fully authenticated; redirecting to authentication entry point. {"exception":"[object] (Symfony\\Component\\Security\\Core\\Exception\\AccessDeniedException(code: 403): Access Denied. at /mnt/storage/private/public_html/bank/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall/AccessListener.php:70)"} []
[2017-06-23 11:48:22] security.DEBUG: Calling Authentication entry point. [] []
[2017-06-23 11:48:22] request.INFO: Matched route "fos_user_security_login". {"route":"fos_user_security_login","route_parameters":{"_controller":"FOS\\UserBundle\\Controller\\SecurityController::loginAction","_route":"fos_user_security_login"},"request_uri":"http://127.0.0.1:8000/login","method":"GET"} []
[2017-06-23 11:48:22] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2017-06-23 11:48:23] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_controller":"web_profiler.controller.profiler:toolbarAction","token":"fb87aa","_route":"_wdt"},"request_uri":"http://127.0.0.1:8000/_wdt/fb87aa","method":"GET"} []
[2017-06-23 11:48:45] php.INFO: User Deprecated: Calling cache:clear without the --no-warmup option is deprecated since version 3.3. Cache warmup should be done with the cache:warmup command instead. {"exception":"[object] (Symfony\\Component\\Debug\\Exception\\ContextErrorException(code: 0): User Deprecated: Calling cache:clear without the --no-warmup option is deprecated since version 3.3. Cache warmup should be done with the cache:warmup command instead. at /mnt/storage/private/public_html/bank/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Command/CacheClearCommand.php:80)"} []
[2017-06-23 13:25:39] php.INFO: User Deprecated: Calling cache:clear without the --no-warmup option is deprecated since version 3.3. Cache warmup should be done with the cache:warmup command instead. {"exception":"[object] (Symfony\\Component\\Debug\\Exception\\ContextErrorException(code: 0): User Deprecated: Calling cache:clear without the --no-warmup option is deprecated since version 3.3. Cache warmup should be done with the cache:warmup command instead. at /mnt/storage/private/public_html/bank/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Command/CacheClearCommand.php:80)"} []
